//#include "Graph_theory.h"
//
//
//int main() {
//	// Чтобы кириллица корректно отображалась в консоли
//	setlocale(LC_ALL, "Russian");
//	// Создаём поток ввода, открываем файл, соответствующий выбранному способу задания графа
//	ifstream in("data/graph_theory/graph_matrix_incidence.txt");
//	// Проверка, открылся ли файл (необязательно, но желательно)
//	if (!in.is_open()) {
//		cout << "File not found\n";
//		// Exit - плохая функция, лучше было бы написать всё остальное под else
//		exit(-1);
//	}
//	// Строка - буфер, просто промежуточный контейнер между файлом и int'овской переменной
//	// (считать сразу в контейнер типа int нельзя)
//	string buffer = "";
//	// Считываем размерность матрицы (количество строк и столбцов соотв.)
//	int n, m;
//	in >> buffer; n = stoi(buffer);
//	in >> buffer; m = stoi(buffer);
//	// Сама матрица - экземпляр класса
//	Matrix_incidence* matrix = new Matrix_incidence(n, m);
//	for (int i = 0; i < n; i++) {
//		// Выделяем память под очередную строку
//		int* row = new int[m];
//		for(int j = 0; j < m; j++) {
//			// Считываем очередной элемент в буфер
//			in >> buffer;
//			// Приводим очередной элемент к int и записываем в строку
//			row[j] = stoi(buffer);
//		}
//		// Записываем полученный ряд в матрицу
//		matrix->set_row(i, row);
//		// Освобождаем память (т. к. теперь эта строка записана внутри matrix)
//		delete[] row;
//	}
//}